[rounded_path]
resolution: 0.2
replace_g0: True

[tool_probe_endstop]
crash_gcode:
    RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print.' 
    M84
    TURN_OFF_HEATERS

[tools_calibrate]
pin: ^!PF5
travel_speed: 20  # mms to travel sideways for XY probing
spread: 7  # mms to travel down from top for XY probing
lower_z: 1.0  # The speed (in mm/sec) to move tools down onto the probe
speed: 2  # The speed (in mm/sec) to retract between probes
lift_speed: 4  # Z Lift after probing done, should be greater than any Z variance between tools
final_lift_z: 6 
sample_retract_dist:2
samples_tolerance:0.05
samples:5
samples_result: median # median, average

[toolchanger]
t_command_restore_axis: Z
params_safe_y: 120
params_close_y: 50
params_min_z: 35
params_fast_speed: 10000 # Go as fast as we can
params_path_speed: 5000

params_type = 'sb_misschanger'
params_sb_misschanger_path: [
                             {'x':0,        'y':0,       'f':1.00},
                             {'x':0,        'y':-60,     'f':0.80},
                             {'x':0,        'y':-65,     'f':0.60},
                             {'x':0,        'y':-70,     'f':0.60},
                             {'x':0,        'y':-75,     'f':0.60},
                             {'x':0,        'y':-70,     'f':0.60},
                             {'x':0,        'y':-75,     'f':0.40},
                             {'x':0,        'y':-70,     'f':0.40},
                             {'x':0,        'y':-75,     'f':0.30},
                             {'x':0,        'y':-70,     'f':0.30},
                             {'x':0,        'y':-80,     'f':0.20},
                             {'x':-6.0,     'y':-80,     'f':0.20},  
                             {'x':-6.0,     'y':-70,     'f':0.30},
                             {'x':-6.0,     'y':-40,     'f':1.00}
                            ]

initialize_gcode:
    DETECT_ACTIVE_TOOL_PROBE
    _INITIALIZE_FROM_DETECTED_TOOL

before_change_gcode: 
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

after_change_gcode: 
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}    
    {% if tool.params_input_shaper_freq_x %}
        SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y}
    {% endif %}
    
dropoff_gcode:
    {% set x = tool.params_park_x|float %} 
    {% set y = tool.params_park_y|float %} 
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    
    ##############  Clearance move    ##############
    # Move 1 mm up to avoid crashing into things, unless the it is lower than params_min_z
    G90
    {% if cur_z <= tool.params_min_z %}
        G0 Z{ tool.params_min_z+1.0 } F{fast}
    {% else %}
        G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    {% endif %}
    
    ##############  Move to the dock  ##############    
    ROUNDED_G0 X={x} Y={tool.params_safe_y} D=0 F={fast}         # Move to the right safe Y position
    {% if 'z' in path[0] %}                                       # For changers with stationary docks
        ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}       ## Move to the first point in the path, in the z axis
    {% endif %}                                                   # Regardess,
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}            # Move to the first point in the path, in the y axis
    STOP_TOOL_PROBE_CRASH_DETECTION
    
    ############## Run the path ##############
    {% for pos in path %}
        G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}

pickup_gcode:
    {% set x = tool.params_park_x|float %} 
    {% set y = tool.params_park_y|float %} 
    {% set z = tool.params_park_z|float %} 
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    
    G90
    ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    {% if 'z' in path[0] %}    # For changers that only use YZ
        ROUNDED_G0 X={x} Z={z + path[-1]['z']|float} F={fast} D=5     
    {% endif %}
    {% if 'x' in path[0] %}    # For changers that only use XY
        ROUNDED_G0 X={x + path[-1]['x']|float} F={fast} D=5
    {% endif %}
    ROUNDED_G0 Y={y + path[-1]['y']|float} F={fast} D=0

    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    {% if tool.extruder %}
        M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}
    
    # Run the path in reverse
    {% for pos in path|reverse %}
        G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}

    # G4 P200
    M400

    START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number}    # Check for crashes.
    
    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=0

    {% if 'X' in restore_position and 'Y' in restore_position and 'Z' in restore_position %}
        ROUNDED_G0 X={restore_position.X} Y={restore_position.Y} Z={restore_position.Z} F={fast} D=0
    {% else %}
        {% if 'X' in restore_position and 'Y' in restore_position %}
            ROUNDED_G0 X={restore_position.X} Y={restore_position.Y} F={fast} D=100
        {% else %}
            {% if 'X' in restore_position %}
                ROUNDED_G0 X={restore_position.X} F={fast} D=1000
            {% endif %}
            {% if 'Y' in restore_position %}
                ROUNDED_G0 Y={restore_position.Y} F={fast} D=100
            {% endif %}
        {% endif %}
        {% if 'Z' in restore_position %}
            ROUNDED_G0 Z={restore_position.Z} F={fast} D=0
        {% endif %}
    {% endif %}
    
    ROUNDED_G0 D=0
