####################################################################################
#	                         Hidden
####################################################################################
#--------------------------------------------------------------------
[gcode_macro _PRINT_END_FIL]            
gcode:
    {% if printer.extruder.temperature > 190 %}
        G10                                             # Retracting the filament
        G92 E0                                          # Zeroing the extruder
    {% else %}
        RESPOND TYPE=echo MSG='T{tool_nr} is cold...'
	{% endif %}

####################################################################################
#	                         Working
####################################################################################
#--------------------------------------------------------------------
[gcode_macro PRINT_START]                                   # Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    RESPOND TYPE=echo MSG='PRINT_START...'
    ## Clear nozzle temps -------------------------------------------
    {% set tools = printer.toolchanger.tool_numbers %}
    {% for tool in tools %}
        {% set para = "T"~tool~"_TEMP" %}
        {% if para|string in params %}
            {% set tooltemp = 'params.'~para %}
            M104 T{tool} S0
        {% endif %}
    {% endfor %}
    
    ## Set right bed temp -------------------------------------------
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP}
    
    ## Switch to T0 and re-home -------------------------------------
    M104 T0 S150
    G28                                                     # Homing
    T0
    M109 S150                                               # and set the curent nozzle temp to match the bed before probing
    G28                                                     # Homing

    ## Quad gantry leveling -----------------------------------------
    RESPOND TYPE=echo MSG='Quad Gantry Level...'
    QUAD_GANTRY_LEVEL                                       # Gantry levelling
    G28                                                     # Homing

    ## Bes Mesh -----------------------------------------------------
    BED_MESH_CLEAR                                          # Unloading net beds
    {% if printer['exclude_object'].objects == null %}
        BED_MESH_PROFILE LOAD=full_bed                      # Loading the net bed
    {% else %}
        TOOL_BED_MESH_CALIBRATE                             # BED_MESH_CALIBRATE, but with compensation for tool_z_offset
    {% endif %}

    ## Skew ---------------------------------------------------------
    SET_SKEW CLEAR=1                                        # Clear skew compensation
    SKEW_PROFILE LOAD=calilantern_skew_profile              # Load skew compensation

    ## Re-home -------------------------------------------------------
    G28                                                     # Homing

    ## Set nozzle temps ----------------------------------------------
    {% set tools = printer.toolchanger.tool_numbers %}
    {% for tool in tools %}
        {% set para = "T"~tool~"_TEMP" %}
        {% if para|string in params %}
            {% set tooltemp = 'params.'~para %}
            M104 T{tool} S{tooltemp}
        {% else %}
            M104 T{tool} S0
        {% endif %}
    {% endfor %}

    {% for tool in tools %}
        {% set para = "T"~tool~"_TEMP" %}
        {% if para|string in params %}
            {% set tooltemp = 'params.'~para %}
            M109 T{tool} S{tooltemp}
        {% endif %}
    {% endfor %}
    
    ## Move nozzle to corner ----------------------------------------
    G1 X15 F9000
    RESPOND TYPE=echo MSG='Printing...'

#--------------------------------------------------------------------
[gcode_macro PRINT_END]                                     # Set PRINT_END as the end-of-print macro to customise the after-print action.
gcode:
    M400                                                    # finish off and clear buffer
    RESPOND TYPE=echo MSG='PRINT_END...'
    
    G91                                                     # relative position
    G0 Z1.00 F9000                                          # Remove nozzle
    G90
    
    {% set tools = printer.toolchanger.tool_numbers %}
    {% for tool in tools|reverse %}
        {% set para = "T"~tool~"_TEMP" %}
        {% if para|string in params %}
            T{tool}
            {% if printer.extruder.temperature > params.TOOL_TEMP - 5 %}
                G10                                         # Retracting the filament
                G92 E0                                      # Zeroing the extruder
        	{% endif %}
        {% endif %}
    {% endfor %}
    
    M400
    TURN_OFF_HEATERS                                        # Close the hot end
    M107                                                    # Switch off the fan.
    BED_MESH_CLEAR                                          # Unloading net beds
    SET_SKEW CLEAR=1                                        # Clear skew compensation
    
    {% if printer.toolhead.position[2]|float < 250 %}
        G0 Z250 F9000
    {% else %}
        G0 X340 Y340 F9000
    {% endif %}
    
    RESPOND TYPE=echo MSG='Finished...'

#--------------------------------------------------------------------
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %} 
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT



