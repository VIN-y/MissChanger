#####################################################################
#                        Hidden
#####################################################################
#--------------------------------------------------------------------
[gcode_macro _GLOBAL_OFFSET]
variable_th: -1
variable_xg: 0.0
variable_yg: 0.0
variable_zg: 0.0
gcode:
    RESPOND TYPE=echo MSG="Baby Z = {zg} mm"
    RESPOND TYPE=echo MSG="Baby Y = {yg} mm"
    RESPOND TYPE=echo MSG="Baby X = {xg} mm"
    RESPOND TYPE=echo MSG="T = {th}"

# #--------------------------------------------------------------------
# [gcode_macro _T0_OFFSET]
# variable_x0: 0.0
# variable_y0: 0.0
# variable_z0: 0.0
# gcode:
#     RESPOND TYPE=echo MSG="Baby Z0 = {z0} mm"
#     RESPOND TYPE=echo MSG="Baby Y0 = {y0} mm"
#     RESPOND TYPE=echo MSG="Baby X0 = {x0} mm"

# #--------------------------------------------------------------------
# [gcode_macro _T1_OFFSET]
# variable_x1: 0.0
# variable_y1: 0.0
# variable_z1: 0.0
# gcode:
#     RESPOND TYPE=echo MSG="Baby Z1 = {z1} mm"
#     RESPOND TYPE=echo MSG="Baby Y1 = {y1} mm"
#     RESPOND TYPE=echo MSG="Baby X1 = {x1} mm"

# #--------------------------------------------------------------------
# [gcode_macro _T2_OFFSET]
# variable_x2: 0.0
# variable_y2: 0.0
# variable_z2: 0.0
# gcode:
#     RESPOND TYPE=echo MSG="Baby Z2 = {z2} mm"
#     RESPOND TYPE=echo MSG="Baby Y2 = {y2} mm"
#     RESPOND TYPE=echo MSG="Baby X2 = {x2} mm"

# #--------------------------------------------------------------------
# [gcode_macro _T3_OFFSET]
# variable_x3: 0.0
# variable_y3: 0.0
# variable_z3: 0.0
# gcode:
#     RESPOND TYPE=echo MSG="Baby Z3 = {z3} mm"
#     RESPOND TYPE=echo MSG="Baby Y3 = {y3} mm"
#     RESPOND TYPE=echo MSG="Baby X3 = {x3} mm"

#--------------------------------------------------------------------
[gcode_macro _RECORD]
variable_xc: 0.0
variable_yc: 0.0
variable_zc: 0.0
variable_is_absolute: 0
# variable_is_global: -1          # used variable for potential per-toolhead-offets
variable_accept_change: 1
gcode:
    {% if is_absolute == 0 %}
        {% if xc != 0.0 and accept_change == 1 %}
            SET_GCODE_VARIABLE MACRO=_GLOBAL_OFFSET  VARIABLE=xg  VALUE={ xc + printer["gcode_macro _GLOBAL_OFFSET"].xg|float }
        {% endif %}
        {% if yc != 0.0 and accept_change == 1 %}
            SET_GCODE_VARIABLE MACRO=_GLOBAL_OFFSET  VARIABLE=yg  VALUE={ yc + printer["gcode_macro _GLOBAL_OFFSET"].yg|float }
        {% endif %}
        {% if zc != 0.0 and accept_change == 1 %}
            SET_GCODE_VARIABLE MACRO=_GLOBAL_OFFSET  VARIABLE=zg  VALUE={ zc + printer["gcode_macro _GLOBAL_OFFSET"].zg|float }
        {% endif %}
    {% else %}
        # Place for custom code for absolute offset inputs.
        # However, it is not adviced. Absolute offsets are often used for automation;
        # thus, custom config can leads to incompatibilities or even DAMAGES to the printer.
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _APPLY_GLOBAL_GCODE_OFFSETS]
gcode:
    {% set xg = printer["gcode_macro _GLOBAL_OFFSET"].xg|float %}
    {% set yg = printer["gcode_macro _GLOBAL_OFFSET"].yg|float %}
    {% set zg = printer["gcode_macro _GLOBAL_OFFSET"].zg|float %}
    
    SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=accept_change VALUE=0
    {% if printer["gcode_macro _GLOBAL_OFFSET"].th|int != printer.tool_probe_endstop.active_tool_number %}
        SET_GCODE_OFFSET  Z_ADJUST={zg}  MOVE=1
        SET_GCODE_OFFSET  X_ADJUST={xg}  Y_ADJUST={yg}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=accept_change VALUE=1

    SET_GCODE_VARIABLE MACRO=_GLOBAL_OFFSET VARIABLE=th VALUE={ printer.tool_probe_endstop.active_tool_number }
 
#--------------------------------------------------------------------
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
description: Correct the physical Z endstop offset, relative to TO.
gcode:
    G90 ; absolute mode
    G0 Z10 F1000
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
        {% set tool_z_offset = printer[tool].gcode_z_offset %}
        {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
        SET_KINEMATIC_POSITION Z={10.0 + tool_z_offset|float + probe_z_offset|float}
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
        SET_GCODE_OFFSET  X={printer[tool].gcode_x_offset}  Y={printer[tool].gcode_y_offset}  Z={printer[tool].gcode_z_offset}
    {% endif %}

#####################################################################
#                        Working
#####################################################################
#--------------------------------------------------------------------
[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
    {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
    G90 ; absolute mode
    G0 Z10 F1000
    # Bed mesh knows about the probe offset, but not about the tool offset.
    SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
    BED_MESH_CALIBRATE
    G0 Z10 F1000
    SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}

#--------------------------------------------------------------------
[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
description: [X=<pos>|X_ADJUST=<adjust>] 
             [Y=<pos>|Y_ADJUST=<adjust>] 
             [Z=<pos>|Z_ADJUST=<adjust>] [MOVE=1 [MOVE_SPEED=<speed>]]
gcode:
    {% set newparameters = "" %}
    {% if params.X is defined %}
        SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=is_absolute VALUE=1
        SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=xc VALUE={params.X}
        {% set newparameters = newparameters ~ " X="~params.X %}
    {% else %}
        {% if params.X_ADJUST is defined %}
            SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=is_absolute VALUE=0
            SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=xc VALUE={params.X_ADJUST}
            {% set newparameters = newparameters ~ " X_ADJUST="~params.X_ADJUST %}
        {% endif %}
    {% endif %}
    
    {% if params.Y is defined %}
        SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=is_absolute VALUE=1
        SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=yc VALUE={params.Y}
        {% set newparameters = newparameters ~ " Y="~params.Y %}
    {% else %}
        {% if params.Y_ADJUST is defined %}
            SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=is_absolute VALUE=0
            SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=yc VALUE={params.Y_ADJUST}
            {% set newparameters = newparameters ~ " Y_ADJUST="~params.Y_ADJUST %}
        {% endif %}
    {% endif %}
    
    {% if params.Z is defined %}
        SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=is_absolute VALUE=1
        SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=zc VALUE={params.Z}
        {% set newparameters = newparameters ~ " Z="~params.Z %}
    {% else %}
        {% if params.Z_ADJUST is defined %}
            SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=is_absolute VALUE=0
            SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=zc VALUE={params.Z_ADJUST}
            {% set newparameters = newparameters ~ " Z_ADJUST="~params.Z_ADJUST %}
        {% endif %}
    {% endif %}

    {% if params.MOVE is defined %}
        {% set newparameters = newparameters ~ " MOVE="~params.MOVE %}
    {% else %}
        {% if params.MOVE_SPEED is defined %}
            {% set newparameters = newparameters ~ " MOVE_SPEED="~params.MOVE_SPEED %}
        {% endif %}
    {% endif %}

    _SET_GCODE_OFFSET { newparameters }

    _RECORD
    # Reset recorder values
    SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=xc VALUE=0
    SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=yc VALUE=0
    SET_GCODE_VARIABLE MACRO=_RECORD VARIABLE=zc VALUE=0

