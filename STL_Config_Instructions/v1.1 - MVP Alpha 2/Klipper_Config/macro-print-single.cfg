 ###################################################################################
#	                         Working Functions
####################################################################################
#----------------------------------------------------------------------
[gcode_macro PRINT_START]
variable_clean_threshold: 150.0
variable_printing: 0
gcode:
    RESPOND TYPE=echo MSG='PRINT_START...'
    SET_GCODE_VARIABLE  MACRO=PRINT_START  VARIABLE=printing VALUE=1
    
    ## Set starting temps ----------------------------------------------
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP}
    M109 S150                                               # and set the curent nozzle temp to match the bed before probing

    ## Quad gantry leveling --------------------------------------------
    RESPOND TYPE=echo MSG='Quad Gantry Level...'
    M190 S{params.BED_TEMP}
    G28                                                     # Homing
    QUAD_GANTRY_LEVEL                                       # Gantry levelling
    G28                                                     # Homing

    ## Bes Mesh --------------------------------------------------------
    BED_MESH_CLEAR                                          # Unloading net beds
    {% if printer['exclude_object'].objects == null %}
        BED_MESH_PROFILE LOAD=full_bed                      # Loading the net bed
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}
    
    ## Set print temps and material ------------------------------------
    ## Note for "material" variable:
    ## 0 = Irelevant
    ## 1 = PLA
    ## 2 = PETG
    ## 3 = ABS
    
    RESPOND TYPE=echo MSG='Set Print Temps and Materials...'
    
    {% if "T0_TEMP" in params %}
        M104 T0 S{ params.T0_TEMP }                         # If T0 is used, set it to print temp
        {% if params.T0_FIL|string == "PLA" %}
        SET_GCODE_VARIABLE  MACRO=T0  VARIABLE=material  VALUE=1
        {% endif %}
        {% if params.T0_FIL|string == "PETG" %}
        SET_GCODE_VARIABLE  MACRO=T0  VARIABLE=material  VALUE=2
        {% endif %}
        {% if params.T0_FIL|string == "ABS" %}
        SET_GCODE_VARIABLE  MACRO=T0  VARIABLE=material  VALUE=3
        {% endif %}
    {% else %}
        M104 T0 S0                                          # Else, turn T0 off
    {% endif %}

    ## Turn off toolchange scrub for small print -----------------------
    {% if params.FIRST_LAYER_PRINT_SIZE|float < clean_threshold %}
        {% for tool_nr in printer.toolchanger.tool_numbers %}
            SET_GCODE_VARIABLE  MACRO=T{tool_nr}  VARIABLE=material  VALUE=0
        {% endfor %}
    {% endif %}
    
    ## Set wipe tower location -----------------------------------------
    RESPOND TYPE=echo MSG='Set Wipe Tower Location...'
    {% if "WIPE_TOWER_X" in params %}
        SET_GCODE_VARIABLE  MACRO=_WIPE_TOWER_LOCATION  VARIABLE=wx  VALUE={ params.WIPE_TOWER_X|float }
    {% endif %}
    {% if "WIPE_TOWER_Y" in params %}
        SET_GCODE_VARIABLE  MACRO=_WIPE_TOWER_LOCATION  VARIABLE=wy  VALUE={ params.WIPE_TOWER_Y|float }
    {% endif %}
    
    ## Move to the corner ----------------------------------------------
    G1 X10 Y120 F9000

    ## Wait for print temps --------------------------------------------
    M109 S{ params.TOOL_TEMP }

    ## Purge -----------------------------------------------------------
    RESPOND TYPE=echo MSG='Purge...'
    G90
    G92 E0                             # Reset Extruder
    G1 Z2.0 F3000                      # Move Z Axis up
    G1 X10.1 Y120 Z0.28 F5000.0        # Move to start position
    G1 X10.1 Y300.0 Z0.28 F1500.0 E17  # Draw the first line
    G1 X10.4 Y300.0 Z0.28 F5000.0      # Move to side a little
    G1 X10.4 Y120 Z0.28 F1500.0 E32    # Draw the second line
    G92 E0                             # Reset Extruder
    G90
    
    ## ----------------------------------------------------------------
    RESPOND TYPE=echo MSG='Printing...'

#----------------------------------------------------------------------
[gcode_macro PRINT_END]                                     # Set PRINT_END as the end-of-print macro to customise the after-print action.
gcode:
    M400                                                    # finish off and clear buffer
    RESPOND TYPE=echo MSG='PRINT_END...'
    
    ## ----------------------------------------------------------------
    G91                                                     # relative position
    G0 Z1.00 F9000                                          # Remove nozzle
    G90
    
    ## Clear print variables -------------------------------------------
    TURN_OFF_HEATERS                                        # Close the hot end
    M107                                                    # Switch off the fan.
    BED_MESH_CLEAR                                          # Unloading net beds
    SET_GCODE_VARIABLE  MACRO=_WIPE_TOWER_LOCATION  VARIABLE=wx       VALUE=0.0
    SET_GCODE_VARIABLE  MACRO=_WIPE_TOWER_LOCATION  VARIABLE=wy       VALUE=0.0
    SET_GCODE_VARIABLE  MACRO=PRINT_START           VARIABLE=printing VALUE=0
    {% for tool_nr in printer.toolchanger.tool_numbers %}
        SET_GCODE_VARIABLE  MACRO=T{tool_nr}  VARIABLE=material  VALUE=0
    {% endfor %}
    
    ## ----------------------------------------------------------------
    {% if printer.toolhead.position[2]|float < 200 %}
        G0 Z200 F9000
    {% else %}
        G0 X{printer.toolhead.axis_maximum.x-20} Y{printer.toolhead.axis_maximum.y-20} F9000
    {% endif %}
    STOP_TOOL_PROBE_CRASH_DETECTION
    
    ## ----------------------------------------------------------------
    RESPOND TYPE=echo MSG='Finished...'

#--------------------------------------------------------------------
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; zhop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[printer['toolhead'].extruder].target}    ; set hotend temp variable for reference in resume macro
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x-20} Y{printer.toolhead.axis_maximum.y-20} F6000
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %} 
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
