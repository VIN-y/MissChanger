#--------------------------------------------------------------------
[tool_probe_endstop]
crash_gcode:
    RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print.' 
    BASE_PAUSE
    TURN_OFF_HEATERS

#--------------------------------------------------------------------
[toolchanger]
t_command_restore_axis: Z
params_safe_y: 120
params_close_y: 50
params_min_z: 40
params_max_z: 250
params_fast_speed: 30000   # Speed conversion:
params_path_speed: 8000    # 1500=40mm/s

params_type = 'sb_misschanger'
params_sb_misschanger_path: [
                             {'x':0,        'y':0,       'f':1.00},
                             {'x':0,        'y':-50,     'f':0.80},
                             {'x':0,        'y':-45,     'f':0.80},    # Wiggle...
                             {'x':0,        'y':-55,     'f':0.60},    # ...wingle
                             {'x':0,        'y':-50,     'f':0.50},    # Wiggle...
                             {'x':0,        'y':-60,     'f':0.40},    # ...wingle
                             {'x':0,        'y':-55,     'f':0.38},    # Wiggle...
                             {'x':0,        'y':-65,     'f':0.36},    # ...wingle
                             {'x':0,        'y':-60,     'f':0.34},    # Wiggle...
                             {'x':0,        'y':-70,     'f':0.32},    # ...wingle
                             {'x':0,        'y':-80,     'f':0.30},
                             {'x':-6.0,     'y':-80,     'f':0.20},  
                             {'x':-6.0,     'y':-70,     'f':0.30},
                             {'x':-6.0,     'y':-40,     'f':1.00}
                            ]

## Default shaper params
#  It is better to have something setup for IS than leaving it empty
params_input_shaper_type_x: 'ei'
params_input_shaper_freq_x: 47.200
params_input_shaper_damping_ratio_x: 0.100000
params_input_shaper_type_y: 'ei'
params_input_shaper_freq_y: 34.800
params_input_shaper_damping_ratio_y: 0.100000

initialize_gcode:
    DETECT_ACTIVE_TOOL_PROBE
    _INITIALIZE_FROM_DETECTED_TOOL

before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

after_change_gcode: 
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}

    ## load Input Shaper frequency, type and damping ratio 
    ## (if none or some params_input_shaper_* are set in tool, use default input_shaper_params)
    {% if tool.params_input_shaper_freq_x and tool.params_input_shaper_freq_y %}
      {% if tool.params_input_shaper_type_x and tool.params_input_shaper_type_y %}
        {% if tool.params_input_shaper_damping_ratio_x and tool.params_input_shaper_damping_ratio_y %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={tool.params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={tool.params_input_shaper_damping_ratio_y}
        {% else %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
        {% endif %}
      {% else %}
        SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
      {% endif %}
    {% else %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={params_input_shaper_freq_x} SHAPER_FREQ_Y={params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
    {% endif %}

    {% if printer["gcode_macro PRINT_START"].printing|int == 0 %}
        STOP_TOOL_PROBE_CRASH_DETECTION
    {% endif %}

dropoff_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    
    ##############  Move to the dock  #########################
    G90
    {% if cur_z < tool.params_min_z %}
        G0 X{ x } Y{ tool.params_safe_y } Z{ tool.params_min_z+1.0 } F{fast}
    {% else %}
        G0 X{ x } Y{ tool.params_safe_y } Z{ [cur_z+1.0, max_z]|min } F{fast}
    {% endif %}
    G0 Y{ y + path[0]['y']|float } F{fast}    # Move to the first point in the path, in the y axis
    G4 P250                                   # Pause and wait for physical stability
    M400                                      # Clear cache
    STOP_TOOL_PROBE_CRASH_DETECTION           # Stop crash detection
    M400                                      # Clear cache
    
    ############## Run the path ###############################
    {% for pos in path %}
        G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}
    M400
    RESPOND TYPE=echo MSG='Dropped off {tool.name}...'

pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set wx = printer["gcode_macro _WIPE_TOWER_LOCATION"].wx|float %}
    {% set wy = printer["gcode_macro _WIPE_TOWER_LOCATION"].wy|float %}
    
    ##############  Fast to the last point  ################
    G90
    G0 Y{tool.params_close_y} F{fast}
    G0 X{x + path[-1]['x']|float} F{fast}
    G0 Y{y + path[-1]['y']|float} F{fast}
    ## Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    {% if tool.extruder %}
        M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}
    ## Run the path in reverse
    {% for pos in path|reverse %}
        G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}
    G4 P250                                                  # Pause and wait for physical stability
    M400                                                     # Clear cache
    START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number}    # Start crash detection
    M400                                                     # Clear cache
    G0 Y{tool.params_safe_y} F{fast}                         # Get to safe y
    RESPOND TYPE=echo MSG='Picked up {tool.name}...'
    ## Restore the position
    {% if 'X' in restore_position or 'Y' in restore_position or 'Z' in restore_position %}
        {% if 'X' in restore_position and 'Y' in restore_position and 'Z' in restore_position %}
            G0 X{restore_position.X} Y{restore_position.Y} Z{restore_position.Z} F{fast}
        {% else %}
            {% if 'X' in restore_position and 'Y' in restore_position %}
                G0 X{restore_position.X} Y{restore_position.Y} F{fast}
            {% else %}
                {% if 'X' in restore_position %}
                    G0 X{restore_position.X} F{fast}
                {% endif %}
                {% if 'Y' in restore_position %}
                    G0 Y{restore_position.Y} F{fast}
                {% endif %}
            {% endif %}
            {% if 'Z' in restore_position %}
                {% if wx > 0 and wy > tool.params_safe_y %}
                    {% set macroparameter = "gcode_macro T" ~ tool.tool_number|string %}
                    {% if printer[macroparameter].material|int == 2 %}
                        RESPOND TYPE=echo MSG='Clean PETG Nozzle...'
                        _CLEAN_MID_PRINT
                    {% endif %}
                    G0 X{wx - 1.0} Y{wy - 1.0} Z{restore_position.Z} F{fast}
                {% else %}
                    G0 Z{restore_position.Z} F{fast}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}

####################################################################################
#                        Marcos overwrite
####################################################################################
#--------------------------------------------------------------------
[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
    {% if params.T is defined %}
        {% set newparameters = " T="~params.T %}
        {% if params.S is defined %}
            {% set newparameters = newparameters ~ " TARGET="~params.S %}
        {% endif %}
        SET_TOOL_TEMPERATURE{newparameters}
    {% else %}
        M104.1 {rawparams}
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
    {% if params.T is defined %}
        {% set newparameters = " T="~params.T %}
        {% if params.S is defined %}
            {% set newparameters = newparameters ~ " TARGET="~params.S %}
        {% endif %}
        SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
    {% else %}
    =M109.1 {rawparams}
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BASE_BED_MESH_CALIBRATE
gcode:
     ## Bed mesh knows about the probe offset, but not about the tool offset.
    RESPOND TYPE=echo MSG='TOOL_BED_MESH_CALIBRATE...'
    {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
    G90 ; absolute mode
    G0 Z10 F1000
    SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
    BASE_BED_MESH_CALIBRATE ADAPTIVE=1
    G0 Z10 F1000
    SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}

#--------------------------------------------------------------------
[gcode_macro QUAD_GANTRY_LEVEL]
description: check calibration probe and initialse toolhead before QGL
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    ## This macro done as such to overcomes some Klipper macro variable quirk.
    _CPI_CHECK
    _QGL

####################################################################################
#	                         Hidden
####################################################################################
#--------------------------------------------------------------------
[gcode_macro _CPI_CHECK]
gcode:
    TOOL_CALIBRATE_QUERY_PROBE
    M400

#--------------------------------------------------------------------
[gcode_macro _QGL]
gcode:
    {% if printer.tools_calibrate.calibration_probe_inactive %}
        INITIALIZE_TOOLCHANGER
        _QUAD_GANTRY_LEVEL
    {% else %}
        RESPOND TYPE=error MSG='CALIBRATION PROBE NOT DOCKED!!!'
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
description: Correct the physical Z endstop offset, relative to TO.
gcode:
    G90 ; absolute mode
    G0 Z10 F1000
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
        {% set tool_z_offset = printer[tool].gcode_z_offset %}
        {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
        SET_KINEMATIC_POSITION Z={10.0 + tool_z_offset|float + probe_z_offset|float}
        G0 Z10 F1000
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
        SET_GCODE_OFFSET  X={printer[tool].gcode_x_offset}  Y={printer[tool].gcode_y_offset}  Z={printer[tool].gcode_z_offset}
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
    {% if printer.tool_probe_endstop.active_tool_number|int == -1 %} 
        RESPOND TYPE=error MSG='Failed to detect active tool'
        BASE_PAUSE
    {% else %}
        INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
    {% endif %}

####################################################################################
#	                         Working Functions
####################################################################################
#--------------------------------------------------------------------
[gcode_macro A_CONFIG_TOGGLE]
gcode:
    M400
    SAVE_CONFIG_MODE
    M400
    TOGGLE_CONFIG_MODE
    M400
    FIRMWARE_RESTART

#--------------------------------------------------------------------
[gcode_macro A_TC_BURN_IN]
variable_tcno: 1050    # 1 tool-change at every layer up to z = 210mm
variable_noth: 3       # 3 tool-heads
gcode:
    ## Set up gantry ------------------------------------------------
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% if printer['quad_gantry_level'].applied == False %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    
    # ## Heatsoak -----------------------------------------------------
    # ## This is disable, as not all Voron printer have a chamber thermistor.
    # ## And, it is very wasteful to heat up the chamber for so long.
    # RESPOND TYPE=echo MSG='{"Chamber Heat Soak..."}'
    # SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=100
    # TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM=40
    
    ## Burn in ------------------------------------------------------
    {% set tcnr = (tcno*noth)|int %}                                           # set the number of tool-changes to be run
    RESPOND TYPE=echo MSG='Test {tcnr} tool-changes...'
    
    {% for n in range(tcnr) %}
        {% set nr = printer.toolchanger.tool_numbers|random %}                 # Set a random tool to pickup.
        {% set hi = range(1,printer['toolchanger'].params_max_z|int)|random %} # Set a z height.
        
        RESPOND TYPE=echo MSG='Change No.: {n} | at {hi}mm ...'
        G0 Z{hi} F1500                                                         # Travel to random z.
        
        {% if nr == printer.tool_probe_endstop.active_tool_number|int %}       # If the random tool selected is the active tool,
            TEST_TOOL_DOCKING                                                  # then just test that dock.
        {% else %}                                                             # Otherwise,
            T{ nr }                                                            # pick up the random tool.
        {% endif %}
    {% endfor %}
    
    ## End note -----------------------------------------------------
    RESPOND TYPE=echo MSG='Reliability test cleared. CONGRATULATION'
    
