####################################################################################
#	                         TESTING
####################################################################################
#--------------------------------------------------------------------
[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    {% set out = [] %}
    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(out|join("\n"))}

#--------------------------------------------------------------------
[gcode_macro _TEST_TC_RELIABILITY_Z_POSITION]
gcode:
    {% set cur_z = printer.toolhead.position[2]|float %}
    G90
    {% if cur_z < printer['toolchanger'].params_max_z|float %}
        G0 Z{cur_z + 0.2} F9000
    {% else %}
        G0 Z0.2 F9000
    {% endif %}
    M400
    RESPOND TYPE=echo MSG='Height: {cur_z|round(3, 'common')} mm ...'

#--------------------------------------------------------------------
[gcode_macro TEST_TC_RELIABILITY]
gcode:
    {% set tcno = params.NoTC|default(5)|int %}
    {% set tools = printer.toolchanger.tool_numbers %}
    SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=printing VALUE=1
    ## Set up gantry ------------------------------------------------
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% if printer['quad_gantry_level'].applied == False %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    G28
    G0 Z0.2 F9000
    M106 S125
    ## Testing ------------------------------------------------------
    {% for tool in tools %}
        M400
        {% for n in range(tcno) %}
            M400
            {% set nr = printer.toolchanger.tool_numbers|random %}             # Set a random tool to pickup
            {% set fs = (range(0, 255)|random)|int %}                          # Set a random part fan speed to pickup
            {% set cur_z = printer.toolhead.position[2]|float %}
            ## Move up 1 layer
            _TEST_TC_RELIABILITY_Z_POSITION
            ## Tool change
            G4 P500
            M106 S{fs}
            G4 P500
            M400
            T{nr}
            M400
            RESPOND TYPE=echo MSG='Test cycle: {tool+1} | Change no.:{n+1}'
        {% endfor %}
    {% endfor %}
    T0
    G1 X{printer['gcode_macro _home'].xh} Y{printer['gcode_macro _home'].yh} F9000
    
    ## End note -----------------------------------------------------
    M400
    SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=printing VALUE=0
    RESPOND TYPE=echo MSG='Reliability test cleared. CONGRATULATION'

#--------------------------------------------------------------------
[gcode_macro TEST_DOCKING]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% if printer['quad_gantry_level'].applied == False %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        TEST_TOOL_DOCKING
        RESPOND TYPE=error MSG='PRINTER NEED TO BE RE-HOMED'
    {% endif %}

# #--------------------------------------------------------------------
# [gcode_macro TEST_OFFSET]
# gcode:
#     {% set center_x    = printer["gcode_macro _home"].xh|float %}
#     {% set center_y    = printer["gcode_macro _home"].yh|float %}
#     G0 X{center_x} Y{center_y} Z0 F6000

# #--------------------------------------------------------------------
# [gcode_macro TEST]
# gcode:
    
    